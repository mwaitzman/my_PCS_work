For homework,

1 - Add an edit capability to allow users to edit the contacts. This can easily be implemented by simply reusing the add contact template/form (maybe rename it) and allowing it to pre populate the form with a contacts information, if the contact is passed in. So add an anchor to load the editContact page (passing the id as we do for delete), add a new editContact endpoint that returns the add contact page already populated with the selected contacts information (find the contact with that id and pass to the template so it can fill in the inputs initial values). Then add another endpoint mounted for posts to editContact, and inside, simply find the correct contact, and update its information based on what you get in res.body. Then redirect the user back to the main contacts page where they will see the contacts, including their latest edits.

2 - Add middleware mounted for get requests at /api/contacts and simply return the contents of a contacts array as json instead of returning a HTML page as we are currently doing. This could be used by a more modern SPA like client to fetch the contacts via AJAX (instead of getting an entire html page as we currently are doing). You can test this end point by simply browsing to /api/contacts and seeing if you get the array of contacts. (or you could write some html/js that does an ajax request to fetch them and display if you like)
