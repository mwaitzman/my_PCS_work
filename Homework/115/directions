For homework:
1 - revisit the contacts example that we reworked to use our node server API. In class we implemented (a very inefficient) polling mechanism to keep multiple clients in sync when other clients added, updated, or deleted  contacts.
Web sockets allow a very simple and more efficient mechanism. We can simply set up a websocket connection between the clients and the server, and the server can send out a message to the clients on each add, update, delete so that the clients can update themselves.

Use socket.io as we did in class in the chat example to implement this.
(in each endpoint, after successfully updating the database, send a message to all (or maybe all but sender) telling them what happened. (either different "event types" like add, delete, update, or you could have just one and include what to do in the object sent). The clients register for these events and update the UI accordingly when one is received.

Note that if using an app generated by express generator you will probably want to move the existing code already generating an httpServer out of www and into app.js so that it's available for socketIo to wrap in app.js. You can then add the server to module.exports in app.js and import it in www so that it can still do the rest of its code and set the port for server.listen()
(a quick google search found me a step by step guide to doing this if your unsure what I mean - see https://www.geeksforgeeks.org/creating-socket-io-server-using-express-generator/ It looks like it should work.)

2 - You should also try out mongo. Either use Atlas in the cloud or installed locally on your own machine (or both). Play around with adding some data and running some queries. Begin to get comfortable with how it works. Next class we will see operators and then move on to using it directly from node.
